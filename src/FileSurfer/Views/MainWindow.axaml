<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="using:FileSurfer.ViewModels"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:FileSurfer"
        mc:Ignorable="d" d:DesignWidth="1200" d:DesignHeight="450"
        MinWidth="860" MinHeight="400"
        x:Class="FileSurfer.Views.MainWindow"
        x:DataType="vm:MainWindowViewModel"
        PointerPressed="MouseButtonPressed"
        KeyDown="KeyPressed"
        Icon="/Assets/FileSurfer-logo.ico"
        DataContextChanged="ViewModelLoaded"
        Closing="OnClosing"
        Title="FileSurfer">

    <Design.DataContext>
        <vm:MainWindowViewModel/>
    </Design.DataContext>

    <Window.Styles>
        <StyleInclude Source="avares://FileSurfer/Views/MainWindowStyle.axaml"/>
    </Window.Styles>

    <Window.KeyBindings>
        <KeyBinding Gesture="Shift+Delete" Command="{Binding DeleteCommand}"/>
        <KeyBinding Gesture="Ctrl+Z" Command="{Binding UndoCommand}"/>
        <KeyBinding Gesture="Ctrl+Y" Command="{Binding RedoCommand}"/>
        <KeyBinding Gesture="Ctrl+A" Command="{Binding SelectAllCommand}"/>
        <KeyBinding Gesture="Ctrl+Shift+L" Command="{Binding SelectNoneCommand}"/>
        <KeyBinding Gesture="Multiply" Command="{Binding InvertSelectionCommand}"/>
    </Window.KeyBindings>

    <Window.Resources>
        <DataTemplate x:Key="ListViewTemplate" x:DataType="{x:Type local:FileSystemEntry}">
            <Grid ColumnDefinitions="30 360 160 130 90 Auto" Height="30">
                <Image Source="{Binding Icon}" Grid.Column="0" Width="20" Height="20" Margin="0 0 12 0" Opacity="{Binding Opacity}"/>
                <TextBlock Classes="FileInfo" Grid.Column="1" Text="{Binding Name}" FontFamily="Arial"/>
                <TextBlock Classes="FileInfo" Grid.Column="2" Text="{Binding LastModified}"/>
                <TextBlock Classes="FileInfo" Grid.Column="3" Text="{Binding Type}"/>
                <TextBlock Classes="FileInfo" Grid.Column="4" Text="{Binding Size}" TextAlignment="Right"/>
                <CheckBox Classes="StagedCheckbox" Grid.Column="5" IsVisible="{Binding VersionControlled}" IsChecked="{Binding Staged}" Click="StagedToggle"/>
            </Grid>
        </DataTemplate>
        <DataTemplate x:Key="IconViewTemplate" x:DataType="{x:Type local:FileSystemEntry}">
            <StackPanel Width="80" Spacing="10">
                <Image Source="{Binding Icon}" Width="60" Height="60" Margin="5 5 5 2" Opacity="{Binding Opacity}"/>
                <TextBlock Classes="IconViewInfo" Text="{Binding Name}"/>
            </StackPanel>
        </DataTemplate>
        <DataTemplate x:Key="SideBarTemplate" x:DataType="{x:Type local:FileSystemEntry}">
            <Grid ColumnDefinitions="Auto *" Height="25">
                <Image Source="{Binding Icon}" Grid.Column="0" Width="18" Height="18" Margin="20 0 12 0"/>
                <TextBlock Classes="FileInfo" Grid.Column="1" Text="{Binding Name}" FontFamily="Arial"/>
            </Grid>
        </DataTemplate>
    </Window.Resources>

    <DockPanel Background="{DynamicResource PrimaryColor}">
        <DockPanel DockPanel.Dock="Top" Height="50" Margin="10 0">
            <Button Classes="TopLeftButton" Content="&#xF053;" HotKey="Alt+Left" Command="{Binding GoBackCommand}"/>
            <Button Classes="TopLeftButton" Content="&#xF054;" HotKey="Alt+Right" Command="{Binding GoForwardCommand}"/>
            <Button Classes="TopLeftButton" Content="&#xF01E;" HotKey="F5" Command="{Binding ReloadCommand}"/>
            <Button Classes="TopLeftButton" Content="&#xEBC7;" HotKey="F12" Command="{Binding OpenPowerShellCommand}"/>

            <Grid ColumnDefinitions="* 250">
                <TextBox x:Name="PathBox" Classes="PathBox TopTextBox" Grid.Column="0" Text="{Binding CurrentDir, Mode=TwoWay}" GotFocus="TextBoxGotFocus" LostFocus="TextBoxLostFocus"/>

                <Grid Grid.Column="1">
                    <TextBox x:Name="SearchBox" Classes="SearchBox TopTextBox" Watermark="{Binding SearchWaterMark}" LostFocus="SearchBoxLostFocus" GotFocus="TextBoxGotFocus"/>
                    <Button Classes="CancelSearchButton" Content="&#xF00D;" Command="{Binding CancelSearchCommand}" IsVisible="{Binding Searching}"/>
                    <TextBlock Classes="MagnifyingGlass" Text="&#xF002;" IsVisible="{Binding !Searching}"/>
                </Grid>
            </Grid>
        </DockPanel>

        <Border Height="55" DockPanel.Dock="Top" Grid.Row="2" BorderThickness="0 1 0 1" BorderBrush="{DynamicResource SecondaryColor}">
            <DockPanel LastChildFill="False" Margin="10 0">
                <Button Classes="FileOperationButton" Content="&#xEA7F;" HotKey="Ctrl+N" Command="{Binding NewFileCommand}"/>
                <Button Classes="FileOperationButton" Content="&#xEA80;" HotKey="Ctrl+Shift+N" Command="{Binding NewDirCommand}"/>
                <Rectangle Classes="ButtonSeparator"/>
                <Button x:Name="CutButton" Classes="FileOperationButton" Content="&#xF0190;" HotKey="Ctrl+X" Command="{Binding CutCommand}"/>
                <Button x:Name="CopyButton" Classes="FileOperationButton" Content="&#xF0C5;" HotKey="Ctrl+C" Command="{Binding CopyCommand}"/>
                <Button x:Name="PasteButton" Classes="FileOperationButton" Content="&#xF0192;" HotKey="Ctrl+V" Command="{Binding PasteCommand}"/>
                <Button Classes="FileOperationButton" Content="&#xF0455;" HotKey="F2" Click="OnRenameClicked"/>
                <Button x:Name="DeleteButton" Classes="FileOperationButton" Content="&#xF014;" HotKey="Delete" Command="{Binding MoveToTrashCommand}"/>
                <Rectangle Classes="ButtonSeparator"/>
                <Button Classes="MenuButton" Width="80" Content="&#xF176;&#xF175; Sort">
                    <Button.Flyout>
                        <MenuFlyout>
                            <MenuItem Classes="MenuOption" Header="Name" Command="{Binding SortByNameCommand}"/>
                            <MenuItem Classes="MenuOption" Header="Date" Command="{Binding SortByDateCommand}"/>
                            <MenuItem Classes="MenuOption" Header="Type" Command="{Binding SortByTypeCommand}"/>
                            <MenuItem Classes="MenuOption" Header="Size" Command="{Binding SortBySizeCommand}"/>
                        </MenuFlyout>
                    </Button.Flyout>
                </Button>
                <Button Classes="MenuButton" Content="&#x00B7;&#x00B7;&#x00B7;" FontWeight="ExtraBold">
                    <Button.Flyout>
                        <MenuFlyout>
                            <MenuItem Classes="MenuOption" Header="Undo" Command="{Binding UndoCommand}"/>
                            <MenuItem Classes="MenuOption" Header="Redo" Command="{Binding RedoCommand}"/>
                            <Separator/>
                            <MenuItem Classes="MenuOption" Header="Select all" Command="{Binding SelectAllCommand}"/>
                            <MenuItem Classes="MenuOption" Header="Select none" Command="{Binding SelectNoneCommand}"/>
                            <MenuItem Classes="MenuOption" Header="Invert selection" Command="{Binding InvertSelectionCommand}"/>
                            <Separator/>
                            <MenuItem Classes="MenuOption" Header="Settings" Command="{Binding OpenSettingsCommand}"/>
                        </MenuFlyout>
                    </Button.Flyout>
                </Button>

                <Button Classes="GitButton GitButtonHover" Content="PUSH" Command="{Binding PushCommand}" IsVisible="{Binding IsVersionControlled}"/>
                <Button Classes="GitButton GitButtonHover" Content="COMMIT" Click="OnCommitClicked" IsVisible="{Binding IsVersionControlled}"/>
                <Button Classes="GitButton GitButtonHover" Content="PULL" Command="{Binding PullCommand}" IsVisible="{Binding IsVersionControlled}"/>
                <ComboBox Classes="BranchComboBox" ItemsSource="{Binding Branches}" SelectedItem="{Binding CurrentBranch}" SelectedIndex="{Binding CurrentBranchIndex}" IsVisible="{Binding IsVersionControlled}"/>
            </DockPanel>
        </Border>

        <Grid RowDefinitions="* 24" DockPanel.Dock="Bottom">
            <Grid Grid.Row="0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="200" MinWidth="100"/>
                    <ColumnDefinition Width="9"/>
                    <ColumnDefinition Width="*" MinWidth="200"/>
                </Grid.ColumnDefinitions>

                <ScrollViewer Padding="4 10 0 3">
                    <StackPanel Orientation="Vertical" Grid.Column="0">
                        <ListBox x:Name="QuickAccessListBox" IsVisible="False" Classes="SideBarListBox" ItemsSource="{Binding QuickAccess}" PropertyChanged="OnQuickAccessChanged" Tapped="SideBarEntryClicked" ItemTemplate="{StaticResource SideBarTemplate}">
                            <ListBox.Styles>
                                <Style Selector="ListBoxItem">
                                    <Setter Property="Padding" Value="10 3 10 3"/>
                                    <Setter Property="ContextMenu">
                                        <Setter.Value>
                                            <ContextMenu x:DataType="local:FileSystemEntry">
                                                <MenuItem Classes="ContextMenuItem" Header="Remove from quick access" Click="RemoveFromQuickAccess"/>
                                            </ContextMenu>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ListBox.Styles>
                        </ListBox>

                        <Separator x:Name="FirstSeparator" IsVisible="False" Background="{DynamicResource SecondaryColor}"/>

                        <ListBox x:Name="SpecialsListBox" IsVisible="False" Classes="SideBarListBox" ItemsSource="{Binding SpecialFolders}" Background="{DynamicResource PrimaryColor}" Tapped="SideBarEntryClicked" ItemTemplate="{StaticResource SideBarTemplate}">
                            <ListBox.Styles>
                                <Style Selector="ListBoxItem">
                                    <Setter Property="Padding" Value="10 3 10 3"/>
                                </Style>
                            </ListBox.Styles>
                        </ListBox>

                        <Separator x:Name="SecondSeparator" IsVisible="False" Background="{DynamicResource SecondaryColor}"/>

                        <ListBox x:Name="DrivesListBox" Classes="SideBarListBox" ItemsSource="{Binding Drives}" Tapped="SideBarEntryClicked" ItemTemplate="{StaticResource SideBarTemplate}">
                            <ListBox.Styles>
                                <Style Selector="ListBoxItem">
                                    <Setter Property="Padding" Value="10 3 10 3"/>
                                </Style>
                            </ListBox.Styles>
                        </ListBox>
                    </StackPanel>
                </ScrollViewer>

                <GridSplitter Classes="GridSplitter" Grid.Column="1"/>

                <Grid Grid.Column="2" RowDefinitions="Auto Auto * Auto Auto">
                    <StackPanel Grid.Row="0" x:Name="LabelsPanel" Margin="55 0 0 0" Orientation="Horizontal" Height="30">
                        <Border Classes="LabelBorder" Width="350" >
                            <Label Classes="InfoLabel" Content="Name"/>
                        </Border>
                        <Border Classes="LabelBorder" Width="150">
                            <Label Classes="InfoLabel" Content="Date"/>
                        </Border>
                        <Border Classes="LabelBorder" Width="120">
                            <Label Classes="InfoLabel" Content="Type"/>
                        </Border>
                        <Border Classes="LabelBorder" Width="100">
                            <Label Classes="InfoLabel" Content="Size"/>
                        </Border>
                        <Border Classes="LabelBorder" Width="100" IsVisible="{Binding IsVersionControlled}">
                            <Label Classes="InfoLabel" Content="Staged"/>
                        </Border>
                    </StackPanel>

                    <Label Grid.Row="1" Classes="DirEmptyLabel" Content="This directory is empty" IsVisible="{Binding DirectoryEmpty}"/>

                    <ListBox Grid.Row="2" x:Name="FileDisplay" Classes="FileDisplay" SelectionMode="Multiple" Tapped="FilesTapped" ItemTemplate="{StaticResource ListViewTemplate}"
                             ItemsSource="{Binding FileEntries}" SelectedItems="{Binding SelectedFiles}" DoubleTapped="FilesDoubleTapped">
                        <ListBox.Styles>
                            <Style Selector="ListBoxItem">
                                <Setter Property="Padding" Value="10 0 10 0"/>
                                <Setter Property="Margin" Value="0 0 4 4"/>
                                <Setter Property="ContextMenu">
                                    <Setter.Value>
                                        <ContextMenu Classes="FileContextMenu" x:DataType="local:FileSystemEntry">
                                            <MenuItem Classes="ContextMenuItem" Header="Open" Click="OpenClicked"/>
                                            <MenuItem Classes="ContextMenuItem" Header="Open as" Click="OpenAs" IsVisible="{Binding !IsDirectory}"/>
                                            <MenuItem Classes="ContextMenuItem" Header="Open in Notepad" IsVisible="{Binding !IsDirectory}" Click="OpenInNotepad"/>
                                            <MenuItem Classes="ContextMenuItem" Header="Add to quick access" Click="PinToQuickAccess"/>
                                            <Separator Classes="ContextMenuSeparator"/>
                                            <MenuItem Classes="ContextMenuItem" Header="Add to archive" Click="AddToArchive"/>
                                            <MenuItem Classes="ContextMenuItem" Header="Extract archive" IsVisible="{Binding IsArchived}" Click="ExtractArchive"/>
                                            <Separator Classes="ContextMenuSeparator"/>
                                            <MenuItem Classes="ContextMenuItem" Header="Copy path" Click="CopyPath"/>
                                            <MenuItem Classes="ContextMenuItem" Header="Cut" Click="Cut"/>
                                            <MenuItem Classes="ContextMenuItem" Header="Copy" Click="Copy"/>
                                            <MenuItem Classes="ContextMenuItem" Header="Create shortcut" Click="CreateShortcut"/>
                                            <Separator Classes="ContextMenuSeparator"/>
                                            <MenuItem Classes="ContextMenuItem" Header="Delete" Click="Delete"/>
                                            <MenuItem Classes="ContextMenuItem" Header="Delete permanently" Click="DeletePermanently"/>
                                            <MenuItem Classes="ContextMenuItem" Header="Rename" Click="OnRenameClicked"/>
                                            <Separator Classes="ContextMenuSeparator"/>
                                            <MenuItem Classes="ContextMenuItem" Header="Properties" Click="ShowProperties"/>
                                        </ContextMenu>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ListBox.Styles>
                        <ListBox.ItemsPanel>
                            <ItemsPanelTemplate>
                                <WrapPanel Orientation="Vertical" Loaded="WrapPanelLoaded"/>
                            </ItemsPanelTemplate>
                        </ListBox.ItemsPanel>
                    </ListBox>

                    <Border x:Name="NewNameBar" Classes="InputBorder" Grid.Row="3">
                        <StackPanel Orientation="Horizontal">
                            <Label Classes="InputLabel" Content="New name: "/>
                            <TextBox x:Name="NameInputBox" Classes="InputBox" GotFocus="TextBoxGotFocus" LostFocus="InputBoxLostFocus"/>
                        </StackPanel>
                    </Border>

                    <Border x:Name="CommitMessageBar" Classes="InputBorder" Grid.Row="4">
                        <StackPanel Orientation="Horizontal">
                            <Label Classes="InputLabel" Content="Commit message: "/>
                            <TextBox x:Name="CommitInputBox" Classes="InputBox" GotFocus="TextBoxGotFocus" LostFocus="InputBoxLostFocus" Width="250"/>
                        </StackPanel>
                    </Border>
                </Grid>
            </Grid>

            <Border Grid.Row="2" BorderThickness="0 1 0 0" BorderBrush="{DynamicResource SecondaryColor}">
                <DockPanel LastChildFill="False">
                    <TextBlock Classes="SelectInfo" Text="{Binding SelectionInfo}"/>

                    <Button Classes="ViewFormatButton" Content="&#xF0573;" Margin="0 0 5 0" Click="IconView"/>
                    <Button Classes="ViewFormatButton" Content="&#xF0571;" Margin="0 0 3 0" Click="ListView"/>
                </DockPanel>
            </Border>
        </Grid>
    </DockPanel>

</Window>
